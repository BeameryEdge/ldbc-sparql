Running IC queries...
virtuoso
http://localhost:8890/sparql/
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX sn: <http://www.ldbc.eu/ldbc_socialnet/1.0/data/>
PREFIX snvoc: <http://www.ldbc.eu/ldbc_socialnet/1.0/vocabulary/>
PREFIX sntag: <http://www.ldbc.eu/ldbc_socialnet/1.0/tag/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT
    (?frId AS ?friendId)
    (?last AS ?friendLastName)
    (MIN(?dist) AS ?distanceFromPerson)
    (?bday AS ?friendBirthday)
    (?since AS ?friendCreationDate)
    (?gen AS ?friendGender)
    (?browser AS ?friendBrowserUsed)
    (?locationIP AS ?friendLocationIp)
    (?emails AS ?friendEmails)
    (?languages AS ?friendLanguages)
    (?based AS ?friendCityName)
    (?studies AS ?friendUniversities)
    (?jobs AS ?friendCompanies)
{
    {
        SELECT
            ?fr
            ?emails
            ?dist
            (GROUP_CONCAT(?language;separator=", ") AS ?languages)
        WHERE
        {
            {
                SELECT
                    ?fr
                    ?dist
                    (GROUP_CONCAT(?email;separator=", ") AS ?emails)
                WHERE
                {
                    {
                        SELECT
                            ?fr
                            (MIN(?distInner) AS ?dist)
                        WHERE
                        {
                            BIND( 30786325583618 AS ?rootId )
                            ?rootPerson a snvoc:Person .
                            ?rootPerson snvoc:id ?rootId .
                            ?fr a snvoc:Person .
                            {
                                ?rootPerson (snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson) ?fr .
                                BIND( 1 AS ?distOneInner )
                            } UNION {
                                ?rootPerson ((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson))/((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson)) ?fr .
                                BIND( 2 AS ?distTwoInner )
                            } UNION {
                                ?rootPerson ((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson))/((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson))/((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson)) ?fr .
                            }
                            ?fr snvoc:id ?frId .
                            FILTER(?frId != ?rootId) .
                            ?fr snvoc:firstName "Chau" .
                            BIND( IF(COALESCE(?distOneInner, 4) < 4, 1, IF(COALESCE(?distTwoInner, 4) < 4, 2, 3)) AS ?distInner)
                        }
                        GROUP BY ?fr
                    }
                    ?fr snvoc:email ?email .
                }
                GROUP BY ?fr ?dist
            }
            ?fr snvoc:speaks ?language
        }
        GROUP BY ?fr ?emails ?dist
    }
    ?fr snvoc:id ?frId .
    ?fr snvoc:lastName ?last .
    ?fr snvoc:birthday ?bday .
    ?fr snvoc:isLocatedIn ?basedURI .
    ?basedURI foaf:name ?based .
    ?fr snvoc:creationDate ?since .
    ?fr snvoc:gender ?gen .
    ?fr snvoc:locationIP ?locationIP .
    ?fr snvoc:browserUsed ?browser .
    OPTIONAL {
        {
            SELECT
                (?frInner AS ?frInnerUni)
                (GROUP_CONCAT(CONCAT(?uniName, " ", xsd:string(?classYear), " ", ?uniCountry);separator=", ") AS ?studies)
            {
                SELECT DISTINCT
                    ?frInner
                    ?uniName
                    ?classYear
                    ?uniCountry
                {
                    ?frInner a snvoc:Person .
                    ?frInner snvoc:studyAt ?study .
                    ?study snvoc:hasOrganisation ?uni .
                    ?uni foaf:name ?uniName .
                    ?study snvoc:classYear ?classYear .
                    ?uni snvoc:isLocatedIn/foaf:name ?uniCountry .
                }
            }
            GROUP BY ?frInner
        } .
        ?frInnerUni snvoc:id ?frInnerUniId .
        FILTER( ?frId = ?frInnerUniId)
    } .
    OPTIONAL {
        {
            SELECT
                (?frInner AS ?frInnerComp)
                (GROUP_CONCAT(CONCAT(?companyName, " ", xsd:string(?workFrom), " ", ?companyCountry);separator=", ") AS ?jobs)
            {
                SELECT DISTINCT
                    ?frInner
                    ?companyName
                    ?workFrom
                    ?companyCountry
                {
                    ?frInner a snvoc:Person .
                    ?frInner snvoc:workAt ?work .
                    ?work snvoc:hasOrganisation ?company .
                    ?work snvoc:workFrom ?workFrom .
                    ?company snvoc:isLocatedIn/foaf:name ?companyCountry .
                    ?company foaf:name ?companyName
                }
            }
            GROUP BY ?frInner
        } .
        ?frInnerComp snvoc:id ?frInnerCompId .
        FILTER( ?frId = ?frInnerCompId)
    }
}
GROUP BY ?frId ?last ?bday ?since ?gen ?browser ?locationIP ?based ?studies ?jobs ?emails ?languages
ORDER BY ?distanceFromPerson ?last ?frId
LIMIT 20

Traceback (most recent call last):
  File "sparql_driver.py", line 38, in <module>
    driver.run_queries(seeds, args.qtype, args.qno, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 128, in run_queries
    run_query(seed, query_type, query_num, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 102, in run_query
    run_query_ic(seed, query_num, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 16, in run_query_ic
    return runner.i_complex_1(seed.get("personId"), seed.get("firstName"))
  File "/Users/kasper/dev/ldbc-sparql/query/sparql_query_runner.py", line 49, in i_complex_1
    self.runQuery(qt)
  File "/Users/kasper/dev/ldbc-sparql/query/virtuoso_query_runner.py", line 28, in runQuery
    with urllib.request.urlopen(req, data=data) as f:
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 531, in open
    response = meth(req, response)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 641, in http_response
    'http', request, response, code, msg, hdrs)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 569, in error
    return self._call_chain(*args)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 503, in _call_chain
    result = func(*args)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 649, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 400: Bad Request
virtuoso
http://localhost:8890/sparql/
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX sn: <http://www.ldbc.eu/ldbc_socialnet/1.0/data/>
PREFIX snvoc: <http://www.ldbc.eu/ldbc_socialnet/1.0/vocabulary/>
PREFIX sntag: <http://www.ldbc.eu/ldbc_socialnet/1.0/tag/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT
    (?frId AS ?personId)
    (?first AS ?personFirstName)
    (?last AS ?personLastName)
    ?messageId
    (?content AS ?messageContent)
    (?creationDate AS ?messageCreationDate)
WHERE
{
    VALUES (?type) {(snvoc:Comment) (snvoc:Post)}
    {
        SELECT DISTINCT
            ?fr
        WHERE {
            ?rootPerson a snvoc:Person .
            ?fr a snvoc:Person .
            ?rootPerson snvoc:id 17592186052613 .
            ?rootPerson ((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson)) ?fr
        }
    }
    ?message snvoc:hasCreator ?fr .
    ?message a ?type
    {
        {
            ?message snvoc:content ?content
        } UNION {
            ?message snvoc:imageFile ?content
        }
    } .
    ?message snvoc:creationDate ?creationDate .
    ?message snvoc:id ?messageId .
    FILTER (?creationDate <= datetime("2012-11-28T01:00:00.000Z")) .
    ?fr snvoc:firstName ?first .
    ?fr snvoc:lastName ?last .
    ?fr snvoc:id ?frId .
}
ORDER BY DESC(?creationDate) ?message
LIMIT 20

Traceback (most recent call last):
  File "sparql_driver.py", line 38, in <module>
    driver.run_queries(seeds, args.qtype, args.qno, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 128, in run_queries
    run_query(seed, query_type, query_num, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 102, in run_query
    run_query_ic(seed, query_num, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 18, in run_query_ic
    return runner.i_complex_2(seed.get("personId"), seed.get("maxDate"))
  File "/Users/kasper/dev/ldbc-sparql/query/sparql_query_runner.py", line 55, in i_complex_2
    self.runQuery(qt)
  File "/Users/kasper/dev/ldbc-sparql/query/virtuoso_query_runner.py", line 28, in runQuery
    with urllib.request.urlopen(req, data=data) as f:
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 531, in open
    response = meth(req, response)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 641, in http_response
    'http', request, response, code, msg, hdrs)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 569, in error
    return self._call_chain(*args)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 503, in _call_chain
    result = func(*args)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 649, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 400: Bad Request
virtuoso
http://localhost:8890/sparql/
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX sn: <http://www.ldbc.eu/ldbc_socialnet/1.0/data/>
PREFIX snvoc: <http://www.ldbc.eu/ldbc_socialnet/1.0/vocabulary/>
PREFIX sntag: <http://www.ldbc.eu/ldbc_socialnet/1.0/tag/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT
    (?frId AS ?personId)
    (?firstName AS ?personFirstName)
    (?lastName AS ?personLastName)
    ?xCount
    ?yCount
    (?xCount + ?yCount AS ?count)
WHERE
{
    {
        SELECT DISTINCT
            ?fr
            ?frId
        WHERE
        {
            ?rootPerson a snvoc:Person .
            ?rootPerson snvoc:id 17592186055119 .
            ?rootPerson ((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson))?/((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson)) ?fr .
            ?fr snvoc:id ?frId .
            ?fr snvoc:isLocatedIn/snvoc:isPartOf ?country .
            ?country a dbpedia-owl:Country .
            ?country foaf:name ?countryName .
            FILTER(?fr != ?rootPerson && ?countryName != "Laos" && ?countryName != "Scotland")
        }
    }
    {
        SELECT
            (?frId AS ?frIdX)
            (COUNT(*) AS ?xCount)
        WHERE
        {
            BIND( datetime("2011-06-01T02:00:00.000Z") AS ?date1 ) .
            BIND( ?date1 + "P42"^^xsd:duration AS ?date2 ) .
            VALUES (?type) {(snvoc:Comment) (snvoc:Post)}
            ?message a ?type .
            ?message snvoc:creationDate ?creationDate .
            FILTER( ?creationDate >= ?date1 && ?creationDate < ?date2 ) .
            ?message snvoc:hasCreator ?fr .
            ?fr a snvoc:Person .
            ?fr snvoc:id ?frId .
            ?message snvoc:isLocatedIn ?country .
            ?country a dbpedia-owl:Country .
            ?country foaf:name "Laos" .
        }
        GROUP BY ?frId
    } .
    FILTER( ?frId = ?frIdX ) .
    {
        SELECT
            (?frId AS ?frIdY)
            (COUNT(*) AS ?yCount)
        WHERE
        {
            BIND( datetime("2011-06-01T02:00:00.000Z") AS ?date1 ) .
            BIND( ?date1 + "P42"^^xsd:duration AS ?date2 ) .
            VALUES (?type) {(snvoc:Comment) (snvoc:Post)}
            ?message a ?type .
            ?message snvoc:creationDate ?creationDate .
            FILTER( ?creationDate >= ?date1 && ?creationDate < ?date2 ) .
            ?message snvoc:hasCreator ?fr .
            ?fr a snvoc:Person .
            ?fr snvoc:id ?frId .
            ?message snvoc:isLocatedIn ?country .
            ?country a dbpedia-owl:Country .
            ?country foaf:name "Scotland" .
        }
        GROUP BY ?frId
    } .
    FILTER( ?frId = ?frIdY )
    ?fr snvoc:firstName ?firstName .
    ?fr snvoc:lastName ?lastName
}
ORDER BY DESC(?sum) ?fr
LIMIT 20


Traceback (most recent call last):
  File "sparql_driver.py", line 38, in <module>
    driver.run_queries(seeds, args.qtype, args.qno, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 128, in run_queries
    run_query(seed, query_type, query_num, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 102, in run_query
    run_query_ic(seed, query_num, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 20, in run_query_ic
    return runner.i_complex_3(seed.get("personId"), seed.get("startDate"), seed.get("durationDays"), seed.get("countryXName"), seed.get("countryYName"))
  File "/Users/kasper/dev/ldbc-sparql/query/sparql_query_runner.py", line 67, in i_complex_3
    self.runQuery(qt)
  File "/Users/kasper/dev/ldbc-sparql/query/virtuoso_query_runner.py", line 28, in runQuery
    with urllib.request.urlopen(req, data=data) as f:
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 531, in open
    response = meth(req, response)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 641, in http_response
    'http', request, response, code, msg, hdrs)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 569, in error
    return self._call_chain(*args)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 503, in _call_chain
    result = func(*args)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 649, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 400: Bad Request
virtuoso
http://localhost:8890/sparql/
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX sn: <http://www.ldbc.eu/ldbc_socialnet/1.0/data/>
PREFIX snvoc: <http://www.ldbc.eu/ldbc_socialnet/1.0/vocabulary/>
PREFIX sntag: <http://www.ldbc.eu/ldbc_socialnet/1.0/tag/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT
    ?tagName
    (COUNT(*) AS ?postCount)
WHERE {
    BIND( datetime("2012-05-01T02:00:00.000Z") AS ?startDate ) .
    BIND( ?startDate + "P37"^^xsd:duration AS ?endDate ) .
    ?rootPerson a snvoc:Person .
    ?rootPerson snvoc:id 21990232559429 .
    ?rootPerson ((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson)) ?fr .
    ?post a snvoc:Post .
    ?post snvoc:hasCreator ?fr .
    ?post snvoc:hasTag ?tag .
    ?tag foaf:name ?tagName .
    ?post snvoc:creationDate ?creationDate .
    FILTER (?creationDate >= ?startDate && ?creationDate <= ?endDate ) .
    FILTER NOT EXISTS {
        ?rootPerson ((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson)) ?fr2 .
        ?post2 snvoc:hasCreator ?fr2 .
        ?post2 a snvoc:Post .
        ?post2 snvoc:hasTag ?tag .
        ?post2 snvoc:creationDate ?creationDate2 .
        FILTER (?creationDate2 < ?startDate)
    }
}
GROUP BY ?tagName
ORDER BY DESC(?postCount) ?tagName
LIMIT 10

Traceback (most recent call last):
  File "sparql_driver.py", line 38, in <module>
    driver.run_queries(seeds, args.qtype, args.qno, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 128, in run_queries
    run_query(seed, query_type, query_num, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 102, in run_query
    run_query_ic(seed, query_num, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 22, in run_query_ic
    return runner.i_complex_4(seed.get("personId"), seed.get("startDate"), seed.get("durationDays"))
  File "/Users/kasper/dev/ldbc-sparql/query/sparql_query_runner.py", line 76, in i_complex_4
    self.runQuery(qt)
  File "/Users/kasper/dev/ldbc-sparql/query/virtuoso_query_runner.py", line 28, in runQuery
    with urllib.request.urlopen(req, data=data) as f:
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 531, in open
    response = meth(req, response)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 641, in http_response
    'http', request, response, code, msg, hdrs)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 569, in error
    return self._call_chain(*args)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 503, in _call_chain
    result = func(*args)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 649, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 400: Bad Request
virtuoso
http://localhost:8890/sparql/
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX sn: <http://www.ldbc.eu/ldbc_socialnet/1.0/data/>
PREFIX snvoc: <http://www.ldbc.eu/ldbc_socialnet/1.0/vocabulary/>
PREFIX sntag: <http://www.ldbc.eu/ldbc_socialnet/1.0/tag/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT
    (?title AS ?forumTitle)
    (SUM(?hasPost) AS ?postCount)
WHERE
{
    {
        SELECT DISTINCT
            ?fr
            ?forum
        WHERE
        {
            {
                SELECT DISTINCT
                    ?fr
                    ?frId
                WHERE
                {
                    BIND( 17592186055119 AS ?rootId )
                    ?rootPerson a snvoc:Person .
                    ?rootPerson snvoc:id ?rootId .
                    ?rootPerson ((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson))?/((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson)) ?fr .
                    ?fr snvoc:id ?frId .
                    FILTER(?frId != ?rootId)
                }
            } .
            ?forum a snvoc:Forum .
            ?forum snvoc:hasMember ?mem .
            ?mem snvoc:hasPerson ?fr .
            ?mem snvoc:joinDate ?date .
            FILTER( ?date >= datetime("2012-09-27T02:00:00.000Z") ) .
        }
    }
    OPTIONAL {
        ?post a snvoc:Post .
        ?post snvoc:hasCreator ?fr .
        ?forum snvoc:containerOf ?post .
        BIND( 1 AS ?hasPostInner )
    } .
    ?forum snvoc:title ?title .
    ?forum snvoc:id ?forumId .
    BIND( COALESCE(?hasPostInner, 0) AS ?hasPost )
}
GROUP BY ?title ?forumId
ORDER BY DESC(?postCount) ?forumId
LIMIT 20

Traceback (most recent call last):
  File "sparql_driver.py", line 38, in <module>
    driver.run_queries(seeds, args.qtype, args.qno, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 128, in run_queries
    run_query(seed, query_type, query_num, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 102, in run_query
    run_query_ic(seed, query_num, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 24, in run_query_ic
    return runner.i_complex_5(seed.get("personId"), seed.get("minDate"))
  File "/Users/kasper/dev/ldbc-sparql/query/sparql_query_runner.py", line 84, in i_complex_5
    self.runQuery(qt)
  File "/Users/kasper/dev/ldbc-sparql/query/virtuoso_query_runner.py", line 28, in runQuery
    with urllib.request.urlopen(req, data=data) as f:
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 531, in open
    response = meth(req, response)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 641, in http_response
    'http', request, response, code, msg, hdrs)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 569, in error
    return self._call_chain(*args)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 503, in _call_chain
    result = func(*args)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 649, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 400: Bad Request
virtuoso
http://localhost:8890/sparql/
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX sn: <http://www.ldbc.eu/ldbc_socialnet/1.0/data/>
PREFIX snvoc: <http://www.ldbc.eu/ldbc_socialnet/1.0/vocabulary/>
PREFIX sntag: <http://www.ldbc.eu/ldbc_socialnet/1.0/tag/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT
    (?tag2Name AS ?tagName)
    (COUNT(?post) AS ?postCount)
WHERE
{
    BIND("Angola" AS ?tagNameParam)
    {
        SELECT DISTINCT
            ?fr
            ?frId
        WHERE
        {
            BIND( 30786325583618 AS ?rootId ) .
            ?rootPerson a snvoc:Person .
            ?rootPerson snvoc:id ?rootId .
            ?rootPerson ((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson))?/((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson)) ?fr .
            ?fr snvoc:id ?frId .
            FILTER(?frId != ?rootId)
        }
    } .
    ?post a snvoc:Post .
    ?post snvoc:hasCreator ?fr .
    ?post snvoc:hasTag ?tag1 .
    ?tag1 foaf:name ?tagNameParam .
    ?post snvoc:hasTag ?tag2 .
    ?tag2 foaf:name ?tag2Name .
    FILTER (?tag2Name != ?tagNameParam) .
}
GROUP BY ?tag2Name
ORDER BY DESC(?postCount) ?tag2Name
LIMIT 10

Results: 10
ic6: {"personId": "30786325583618", "tagName": "Angola"},0.7976534080000001 seconds
summary,ic6,0.7976534080000001 seconds
virtuoso
http://localhost:8890/sparql/
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX sn: <http://www.ldbc.eu/ldbc_socialnet/1.0/data/>
PREFIX snvoc: <http://www.ldbc.eu/ldbc_socialnet/1.0/vocabulary/>
PREFIX sntag: <http://www.ldbc.eu/ldbc_socialnet/1.0/tag/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT
    ?personId
    (?firstName AS ?personFirstName)
    (?lastName AS ?personLastName)
    ?likeCreationDate
    (?minMessageId AS ?messageId)
    (?content AS ?messageContent)
    (?latency AS ?minutesLatency)
    ?isNew
WHERE
{
    {
        SELECT
            ?person
            (MIN(?messageId) AS ?minMessageId)
        WHERE
        {
            {
                SELECT
                    ?personId
                    (MAX(?likeDate) AS ?mostRecentLikeDate)
                WHERE
                {
                    {
                        SELECT DISTINCT
                            ?message
                        WHERE
                        {
                            VALUES (?type) {(snvoc:Comment) (snvoc:Post)}
                            ?rootPerson a snvoc:Person .
                            ?rootPerson snvoc:id 17592186053137 .
                            ?message snvoc:hasCreator ?rootPerson .
                            ?message a ?type
                        }
                    } .
                    ?person a snvoc:Person .
                    ?person snvoc:likes ?like .
                    ?person snvoc:id ?personId .
                    ?like snvoc:hasPost|snvoc:hasComment ?message .
                    ?like snvoc:creationDate ?likeDate .
                }
                GROUP BY ?personId
                ORDER BY DESC(?mostRecentLikeDate) ?personId
                LIMIT 20
            }
            VALUES (?type) {(snvoc:Comment) (snvoc:Post)}
            ?rootPerson a snvoc:Person .
            ?rootPerson snvoc:id 17592186053137 .
            ?message snvoc:hasCreator ?rootPerson .
            ?message a ?type .
            ?message snvoc:id ?messageId .
            ?person a snvoc:Person .
            ?person snvoc:id ?personId .
            ?person snvoc:likes ?like .
            ?like snvoc:hasPost|snvoc:hasComment ?message .
            ?like snvoc:creationDate ?mostRecentLikeDate .
        }
        GROUP BY ?person
    } .
    ?person snvoc:id ?personId .
    ?person snvoc:firstName ?firstName .
    ?person snvoc:lastName ?lastName .
    ?person snvoc:likes ?like .
    ?like snvoc:hasPost|snvoc:hasComment ?message .
    ?message snvoc:id ?minMessageId .
    ?like snvoc:creationDate ?likeCreationDate .
    ?message snvoc:creationDate ?messageCreationDate .
    ?message snvoc:content|snvoc:imageFile ?content .
    BIND( ?likeCreationDate - ?messageCreationDate AS ?latencyInDuration )
    BIND( (DAY(?latencyInDuration) * 24 + HOURS(?latencyInDuration)) * 60 + MINUTES(?latencyInDuration) AS ?latency )
    ?rootPerson a snvoc:Person .
    ?rootPerson snvoc:id 17592186053137 .
    BIND( NOT EXISTS { ?rootPerson (snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson) ?person } AS ?isNew )
}
ORDER BY DESC(?likeCreationDate) ?personId


Results: 0
ic7: {"personId": "17592186053137"},2.567487233 seconds
summary,ic7,2.567487233 seconds
virtuoso
http://localhost:8890/sparql/
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX sn: <http://www.ldbc.eu/ldbc_socialnet/1.0/data/>
PREFIX snvoc: <http://www.ldbc.eu/ldbc_socialnet/1.0/vocabulary/>
PREFIX sntag: <http://www.ldbc.eu/ldbc_socialnet/1.0/tag/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT
    ?personId
    ?personFirstName
    ?personLastName
    ?commentCreationDate
    ?commentId
    ?commentContent
WHERE
{
    VALUES (?type) {(snvoc:Comment) (snvoc:Post)}
    ?rootPerson a snvoc:Person .
    ?rootPerson snvoc:id 24189255818757 .
    ?message snvoc:hasCreator ?rootPerson .
    ?message a ?type .
    ?comment a snvoc:Comment .
    ?comment snvoc:replyOf ?message .
    ?comment snvoc:creationDate ?commentCreationDate .
    ?comment snvoc:id ?commentId .
    ?comment snvoc:content ?commentContent .
    ?comment snvoc:hasCreator ?person .
    ?person snvoc:id ?personId .
    ?person snvoc:firstName ?personFirstName .
    ?person snvoc:lastName ?personLastName
}
ORDER BY DESC(?commentCreationDate) ?commentId
LIMIT 20

Results: 3
ic8: {"personId": "24189255818757"},0.294096254 seconds
summary,ic8,0.294096254 seconds
virtuoso
http://localhost:8890/sparql/
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX sn: <http://www.ldbc.eu/ldbc_socialnet/1.0/data/>
PREFIX snvoc: <http://www.ldbc.eu/ldbc_socialnet/1.0/vocabulary/>
PREFIX sntag: <http://www.ldbc.eu/ldbc_socialnet/1.0/tag/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT
    (?frId AS ?personId)
    (?first AS ?personFirstName)
    (?last AS ?personLastName)
    ?messageId
    (?content AS ?messageContent)
    (?creationDate AS ?messageCreationDate)
WHERE {
    VALUES (?type) {(snvoc:Comment) (snvoc:Post)}
    {
        SELECT DISTINCT
            ?fr
            ?frId
        WHERE
        {
            BIND( 13194139542834 AS ?rootId )
            ?rootPerson a snvoc:Person .
            ?rootPerson snvoc:id ?rootId .
            ?rootPerson ((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson))?/((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson)) ?fr .
            ?fr snvoc:id ?frId .
            FILTER(?frId != ?rootId)
        }
    } .
    ?message snvoc:hasCreator ?fr .
    ?message a ?type .
    ?message snvoc:creationDate ?creationDate .
    FILTER(?creationDate < datetime("2011-12-17T01:00:00.000Z")) .
    ?message snvoc:content|snvoc:imageFile ?content .
    ?message snvoc:id ?messageId .
    ?fr snvoc:firstName ?first .
    ?fr snvoc:lastName ?last .
    ?fr snvoc:id ?frId
}
ORDER BY DESC(?creationDate) ?post
LIMIT 20

Traceback (most recent call last):
  File "sparql_driver.py", line 38, in <module>
    driver.run_queries(seeds, args.qtype, args.qno, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 128, in run_queries
    run_query(seed, query_type, query_num, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 102, in run_query
    run_query_ic(seed, query_num, runner)
  File "/Users/kasper/dev/ldbc-sparql/query/driver.py", line 32, in run_query_ic
    return runner.i_complex_9(seed.get("personId"), seed.get("maxDate"))
  File "/Users/kasper/dev/ldbc-sparql/query/sparql_query_runner.py", line 111, in i_complex_9
    self.runQuery(qt)
  File "/Users/kasper/dev/ldbc-sparql/query/virtuoso_query_runner.py", line 28, in runQuery
    with urllib.request.urlopen(req, data=data) as f:
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 222, in urlopen
    return opener.open(url, data, timeout)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 531, in open
    response = meth(req, response)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 641, in http_response
    'http', request, response, code, msg, hdrs)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 569, in error
    return self._call_chain(*args)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 503, in _call_chain
    result = func(*args)
  File "/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/urllib/request.py", line 649, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 400: Bad Request
virtuoso
http://localhost:8890/sparql/
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX sn: <http://www.ldbc.eu/ldbc_socialnet/1.0/data/>
PREFIX snvoc: <http://www.ldbc.eu/ldbc_socialnet/1.0/vocabulary/>
PREFIX sntag: <http://www.ldbc.eu/ldbc_socialnet/1.0/tag/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT
    (?frId AS ?personId)
    (?first AS ?personFirstName)
    (?last AS ?personLastName)
    (?commonScore AS ?commonInterestScore)
    (?gender AS ?personGender)
    (?locationName AS ?personCityName)
WHERE
{
    BIND(11 AS ?month)
    BIND(IF(?month = 12, 1, ?month + 1) AS ?nextMonth)
    {
        SELECT DISTINCT
            ?fr
            ?frId
        WHERE
        {
            BIND( 30786325583618 AS ?rootId ) .
            ?rootPerson a snvoc:Person .
            ?rootPerson snvoc:id ?rootId .
            ?rootPerson ((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson))/((snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson)) ?fr .
            ?fr snvoc:id ?frId .
            FILTER(?frId != ?rootId) .
            FILTER NOT EXISTS {
                ?rootPerson (snvoc:knows/snvoc:hasPerson)|^(snvoc:knows/snvoc:hasPerson) ?fr .
            }
        }
    } .
    ?fr snvoc:firstName ?first .
    ?fr snvoc:lastName ?last .
    ?fr snvoc:gender ?gender .
    ?fr snvoc:birthday ?bday .
    ?fr snvoc:isLocatedIn ?based .
    ?based foaf:name ?locationName .
    FILTER ( (MONTH(?bday) = ?month && DAY(?bday) >= 21) || (MONTH(?bday) = (?nextMonth) && DAY(?bday) < 22) ) .
    OPTIONAL {
        {
            SELECT
                ?frCommonInner
                ?frCommonInnerId
                (COUNT(?post) AS ?commonScoreInner)
            WHERE
            {
                SELECT DISTINCT
                    ?frCommonInner
                    ?frCommonInnerId
                    ?post
                WHERE {
                    ?rootPerson a snvoc:Person .
                    ?rootPerson snvoc:id 30786325583618 .
                    ?post a snvoc:Post .
                    ?post snvoc:hasCreator ?frCommonInner .
                    ?frCommonInner snvoc:id ?frCommonInnerId .
                    ?post snvoc:hasTag ?tag .
                    ?rootPerson snvoc:hasInterest ?tag
                }
            }
            GROUP BY ?frCommonInner ?frCommonInnerId
        }
        FILTER(?frCommonInnerId = ?frId)
    } .
    OPTIONAL {
        {
            SELECT DISTINCT
                ?frTotalInner
                ?frTotalInnerId
            (COUNT(?post) AS ?totalPostCountInner)
            WHERE {
                ?post a snvoc:Post .
                ?post snvoc:hasCreator ?frTotalInner .
                ?frTotalInner a snvoc:Person .
                ?frTotalInner snvoc:id ?frTotalInnerId .
            }
            GROUP BY ?frTotalInner ?frTotalInnerId
        }
        FILTER(?frTotalInnerId = ?frId)
    }
    BIND( 2 * COALESCE(?commonScoreInner, 0) - COALESCE(?totalPostCountInner, 0) AS ?commonScore )
}
ORDER BY DESC(?commonScore) ?frId
LIMIT 10

Results: 10
ic10: {"personId": "30786325583618", "month": "11", "nextMonth": "12"},4.014098848 seconds
summary,ic10,4.014098848 seconds
